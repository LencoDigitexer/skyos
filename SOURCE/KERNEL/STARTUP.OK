;/************************************************************************/
;/* Sky Operating System V2.0j
;/* Copyright (c) 1996 -1998 by Szeleney Robert
;/*
;/* Project Members: Szeleney Robert
;/*                  Resl Christian
;/*                  Hayrapetian Gregory
;/************************************************************************/
;/* File       : kernel\startup.asm
;/* Last Update: 12.11.1998
;/* Version    : beta
;/* Coded by   : Szeleney Robert
;/* Docus      : Internet, Linux, Minix, all other operating systems,...
;/************************************************************************/
;/* Definition:
;/*   Initial startup code. 16 Bit.
;/*   Loaded at adress 0x90000
;/*   Segment is 0x9000
;/*   Offset  is 0
;/*   Initalizes Protected Mode and Jumps to System at adress 0x10000
;/*
;/* Bugs:
;/*   Warning! Startup code should be lesser than 1 block.
;/*   Setup/Bootcode not tested for more than 1 block.
;/************************************************************************/
;org 0x00
MEMORY_EXTENDED equ 0x80000
[bits 16]
jmp start16


;Routine to print str at DS:SI to screen using int 0x10
prtstr:	lodsb
	and	al,al
	jz	fin
	call	prtchr
	jmp	prtstr
fin:	ret

; Space printing

prtsp2:	call	prtspc		; Print double space
prtspc:	mov	al,0x20	        ; Print single space (fall-thru!)

prtchr:	push	ax
	push	cx
	xor	bh,bh
	mov	cx,0x01
	mov	ah,0x0e
	int	0x10
	pop	cx
	pop	ax
	ret

beep:	mov	al,0x07
	jmp	prtchr

wait_key:
        xor ax, ax
        int 0x16
        ret



start16:
  cli
;we know cs = 0x9000, set ds and es
  mov ax, cs
  mov ds, ax
  mov es, ax
  mov ss, ax
  mov sp, 0xFFF0
  mov bp, 0xFFF0

  mov si, msg_init
  call prtstr


;check if kernel was loaded correct
  mov ax, 0x1000
  mov es, ax

  mov bx, 2
  mov byte al, [es:bx]
  cmp al, 0xAA
  je kernel_ok

  mov ax, ds
  mov es, ax

  mov si, msg_corrupt_kernel
  call prtstr

  stop:
    jmp stop

kernel_ok:
  mov ax, ds
  mov es, ax

  mov si, msg_check_vesa
  call prtstr

;clear screen or init vga-mode
  mov ax, 0x8000
  mov es, ax
  mov bx, 0x1000

  mov byte [es:bx],   'V'
  mov byte [es:bx+1], 'B'
  mov byte [es:bx+2], 'E'
  mov byte [es:bx+3], '2'

  mov ax, 0x4f00
  mov di, 0x1000
  int 0x10

  cmp ax, 0x004f
  jne no_vesa_found

; Protected Mode info
  mov ax,0x4f0a
  mov bx,0
  int 0x10

  cmp ax, 0x004f
  je vesa_found

no_vesa_found:

  mov ax, 0x8000
  mov es, ax
  mov word [es:0x496], 0        ; VESA2.0 not supported

  mov si, msg_no_vesa
  call prtstr

  call wait_key

  jmp vesa_end
vesa_found:

  mov si, msg_vesa
  call prtstr

  call wait_key

  mov bx, es
  mov cx, di

  mov ax, 0x8000
  mov es, ax
  mov word [es:0x500], cx
  mov word [es:0x502], bx
  mov word [es:0x496], 0x105        ; VESA2.0 mode

; 102h or 6Ah      800x600x16
; 103h     -       800x600x256
; 105h     -       1024x768x256
; 107h     -       1280x1024x256

  mov ax, 0x4f02
  mov bx, 0x105
  int 0x10

;  xor bx, bx
;  mov ah, 0x11
;  mov al, 0x12
;  int 0x10

vesa_end:
;reset the disk-controller
  mov si, msg_init_pm
  call prtstr

  mov	ax,0x0000
  mov	dl,0x80
  int	0x13

  mov ax, ds
  mov es, ax

;now we want to move to protected mode
  cli			              ; no interrupts allowed !

; now we enable A20
  call	empty_8042
  mov	al,0xD1		              ; command write
  out	0x64,al
  call	empty_8042
  mov	al,0xDF		              ; A20 on
  out	0x60,al
  call	empty_8042

; reset coprocessor if present
  xor	ax,ax
  out	0xf0,al
  call	delay
  out	0xf1,al
  call	delay

; Now we have to reprogram the interrupts
; We put them right after the intel-reserved hardware interrupts, at
; int 0x20-0x2F. There they won't mess up anything. Sadly IBM really
; messed this up with the original PC, and they haven't been able to
; rectify it afterwards. Thus the bios puts interrupts at 0x08-0x0f,
; which is used for the internal hardware interrupts as well. We just
; have to reprogram the 8259's, and it isn't fun.

  mov     al,0x11
  out     0x20,al
  call    delay
  out     0xA0,al
  call    delay
  mov  al,0x20
  out     0x21,al
  call    delay
  mov  al,0x28
  out     0xA1,al
  call    delay
  mov  al,0x04
  out     0x21,al
  call    delay
  mov  al,0x02
  out     0xA1,al
  call    delay
  mov  al,0x01
  out     0x21,al
  call    delay
  out  0xA1,al
  call    delay
  mov  al,0xFF
  out     0xA1,al
  call    delay
  mov  al,0xFB
  out     0x21,al

; setup descipter tables
  o32 lidt [idt_48]		; load idt with 0,0
  o32 lgdt [gdt_48]		; load gdt with whatever appropriate

  xor   ax, ax
  mov	ax,1		        ; protected mode (PE) bit
  lmsw	ax		        ; This is it!

  jmp	flush_instr
align 4
flush_instr:
; now we are in 16-Bit protected mode, segment register not set, we have to do
; this now
  mov ax, 0x0018
  mov ds, ax

  mov ax, 0x0020
  mov es, ax

  db 0x66, 0xea
  dd 0x10000
  dw 0x10               ; jump into the kernel at adress 0x10000. Section 0

; This routine checks that the keyboard command queue is empty
; (after emptying the output buffers)
;
; No timeout is used - if this hangs there is something wrong with
; the machine, and we probably couldn't proceed anyway.
empty_8042:
	call	delay
	in	al,0x64	                ; 8042 status port
	test	al,1		        ; output buffer?
	jz	no_output
	call	delay
	in	al,0x60	                ; read it
	jmp	empty_8042
no_output:
	test	al,2    		; is input buffer full?
	jnz	empty_8042	        ; yes - loop
	ret

; Delay is needed after doing I/O
;
msg_init         db "SKY Operating System pre-initialization. (startup release 2.1.1a)",13,10
msg_kernel_check db "- Searching Kernel in RAM...",13,10,0
msg_check_vesa   db "- Checking for VESA2.0 mode...",13,10,0

msg_no_vesa      db "   - No VESA2.0 compatible SVGA Card found.",13,10
                 db "     Other graphic cards supported:",13,10
                 db "       Trident 8900/9440/9680",13,10,13,10
                 db "     If you have no VESA2.0 and no Trident SVGA Card,",13,10
                 db "     SKY is not able to start. <press a key>",10,13,0

msg_vesa         db "   - Using VESA2.0 video mode... ",13,10
                 db "     Resolution is 1024x768 with 256 colors.",13,10
                 db "     Warning! You could have problems with ATI cards. Yet not tested.",13,10,13,10

		 db "     Please mail me if your card works with SkyOS or not. Thanks.",13,10
                 db "     E-Mail:bertlman@gmx.at",13,10
		 db "     <press a key>",13,10,0

msg_init_pm      db "Initializing protected mode, switching to SVGA mode (1024x768x256)...",13,10,0

msg_corrupt_kernel
                 db "Warning!! Corrupt kernel detected. This means, startup code is not able to",13,10
	         db "load the kernel, or kernelfile was modified.",13,10
                 db "Please contact bertlman@gmx.at",13,10,0

align 4
delay:
	dw	0x00eb			; jmp $+2
	ret

align 4
gdt:
	dw	0,0,0,0		; dummy

	dw	0,0,0,0		; unused

	dw	0xFFFF		; 4Gb - (0x100000*0x1000 = 4Gb)
	dw	0x0000		; base address=0
	dw	0x9A00		; code read/exec
	dw	0x00CF		; granularity=4096, 386 (+5th nibble of limit)

	dw	0xFFFF		; 4Gb - (0x100000*0x1000 = 4Gb)
	dw	0x0000		; base address=0
	dw	0x9200		; data read/write
	dw	0x00CF		; granularity=4096, 386 (+5th nibble of limit)

	dw	0xFFFF		; 4Gb - (0x100000*0x1000 = 4Gb)
	dw	0x8000		; base address=0
	dw	0x920B		; data read/write
	dw	0x0000		; granularity=4096, 386 (+5th nibble of limit)

align 4
idt_48:
	dw	0		; idt limit=0
	dw	0,0		; idt base=0L

align 4
gdt_48:
	dw	0x28		; gdt limit=2048, 256 GDT entries
	dw	gdt,0x9	        ; gdt base = 0X9xxxx



